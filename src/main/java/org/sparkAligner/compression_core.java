/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sparkAligner;

public class compression_core {
  public static SWIGTYPE_p_unsigned_char new_uint8_t_array(int nelements) {
    long cPtr = compression_coreJNI.new_uint8_t_array(nelements);
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
  }

  public static void delete_uint8_t_array(SWIGTYPE_p_unsigned_char ary) {
    compression_coreJNI.delete_uint8_t_array(SWIGTYPE_p_unsigned_char.getCPtr(ary));
  }

  public static short uint8_t_array_getitem(SWIGTYPE_p_unsigned_char ary, int index) {
    return compression_coreJNI.uint8_t_array_getitem(SWIGTYPE_p_unsigned_char.getCPtr(ary), index);
  }

  public static void uint8_t_array_setitem(SWIGTYPE_p_unsigned_char ary, int index, short value) {
    compression_coreJNI.uint8_t_array_setitem(SWIGTYPE_p_unsigned_char.getCPtr(ary), index, value);
  }

  public static SWIGTYPE_p_unsigned_long_long new_uint64_t_array(int nelements) {
    long cPtr = compression_coreJNI.new_uint64_t_array(nelements);
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_long_long(cPtr, false);
  }

  public static void delete_uint64_t_array(SWIGTYPE_p_unsigned_long_long ary) {
    compression_coreJNI.delete_uint64_t_array(SWIGTYPE_p_unsigned_long_long.getCPtr(ary));
  }

  public static java.math.BigInteger uint64_t_array_getitem(SWIGTYPE_p_unsigned_long_long ary, int index) {
    return compression_coreJNI.uint64_t_array_getitem(SWIGTYPE_p_unsigned_long_long.getCPtr(ary), index);
  }

  public static void uint64_t_array_setitem(SWIGTYPE_p_unsigned_long_long ary, int index, java.math.BigInteger value) {
    compression_coreJNI.uint64_t_array_setitem(SWIGTYPE_p_unsigned_long_long.getCPtr(ary), index, value);
  }

  public static SWIGTYPE_p_unsigned_long_long new_ull_array(int nelements) {
    long cPtr = compression_coreJNI.new_ull_array(nelements);
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_long_long(cPtr, false);
  }

  public static void delete_ull_array(SWIGTYPE_p_unsigned_long_long ary) {
    compression_coreJNI.delete_ull_array(SWIGTYPE_p_unsigned_long_long.getCPtr(ary));
  }

  public static java.math.BigInteger ull_array_getitem(SWIGTYPE_p_unsigned_long_long ary, int index) {
    return compression_coreJNI.ull_array_getitem(SWIGTYPE_p_unsigned_long_long.getCPtr(ary), index);
  }

  public static void ull_array_setitem(SWIGTYPE_p_unsigned_long_long ary, int index, java.math.BigInteger value) {
    compression_coreJNI.ull_array_setitem(SWIGTYPE_p_unsigned_long_long.getCPtr(ary), index, value);
  }

  public static int getMAX_FPGA_NUM() {
    return compression_coreJNI.MAX_FPGA_NUM_get();
  }

  public static void setEngine(SWIGTYPE_p_p_max_engine_t value) {
    compression_coreJNI.engine_set(SWIGTYPE_p_p_max_engine_t.getCPtr(value));
  }

  public static SWIGTYPE_p_p_max_engine_t getEngine() {
    long cPtr = compression_coreJNI.engine_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_max_engine_t(cPtr, false);
  }

  public static void setMaxFile(SWIGTYPE_p_max_file_t value) {
    compression_coreJNI.maxFile_set(SWIGTYPE_p_max_file_t.getCPtr(value));
  }

  public static SWIGTYPE_p_max_file_t getMaxFile() {
    long cPtr = compression_coreJNI.maxFile_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_max_file_t(cPtr, false);
  }

  public static void loadFPGAs(int num) {
    compression_coreJNI.loadFPGAs(num);
  }

  public static void unloadFPGAs(int num) {
    compression_coreJNI.unloadFPGAs(num);
  }

  public static int Lz77CompressOverall(byte[] dataInJava, int length, int dfe_id) {
    return compression_coreJNI.Lz77CompressOverall(dataInJava, length, dfe_id);
  }

  public static java.math.BigInteger Lz77Compress_C_Write_Compress(long param_N, SWIGTYPE_p_unsigned_char instream_input, int dfe_id) {
    return compression_coreJNI.Lz77Compress_C_Write_Compress(param_N, SWIGTYPE_p_unsigned_char.getCPtr(instream_input), dfe_id);
  }

  public static SWIGTYPE_p_unsigned_char Lz77Compress_C_ReadLmem_helperfunc(long param_N, java.math.BigInteger total_len, int dfe_id) {
    long cPtr = compression_coreJNI.Lz77Compress_C_ReadLmem_helperfunc(param_N, total_len, dfe_id);
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
  }

}
